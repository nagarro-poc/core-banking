version: "3"
services:
  service-registry:
    container_name: service-registry
    build: ./service-registry
    ports:
      - "8761:8761"
    networks:
      - core-ms
  config-server:
    container_name: config-server
    build: ./config-server
    ports:
      - "8888:8888"
    depends_on:
      - service-registry
    networks:
      - core-ms
  api-gateway:
    container_name: api-gateway
    build: ./api-gateway
    ports:
      - "8080:8080"
    networks:
      - core-ms
    depends_on:
      - service-registry
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
  user-service:
    container_name: user-service
    build: ./user-service
    ports:
      - "8081:8081"
    depends_on:
      - service-registry
      - mysql
      - vault
      - redis
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    networks:
      - core-ms
    links:
      - redis
  account-service:
    container_name: account-service
    build: ./account-service
    ports:
      - "8086:8086"
    depends_on:
      - service-registry
      - mysql
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    networks:
      - core-ms
    environment:
      - SPRING_PROFILES_ACTIVE=development
  identity-service:
    container_name: identity-service
    build: ./identity-service
    ports:
      - "8082:8082"
    depends_on:
      - service-registry
      - mysql
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    networks:
      - core-ms
  transaction-service:
    container_name: transaction-service
    build: ./transaction-service
    ports:
      - "8087:8087"
    depends_on:
      - service-registry
      - mongodb
      - kafka
      - zookeeper
      #- kafdrop
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    networks:
      - core-ms
  notification-service:
    container_name: notification-service
    build: ./notification-service
    ports:
      - "8088:8088"
    depends_on:
      - service-registry
      - kafka
      - zookeeper
      - redis
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    networks:
      - core-ms
    links:
      - redis
  mysql:
    image: mysql:latest
    container_name: mysql
    networks:
      - core-ms
    ports:
      - "3306:3306"
    volumes:
      - ./init:/docker-entrypoint-initdb.d
      - mdb_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: password
  zookeeper:
    image: wurstmeister/zookeeper
    networks:
      - core-ms
    container_name: zookeeper
    ports:
      - "2181:2181"
    hostname: zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
      - ZOOKEEPER_CLIENT_PORT=2181
    restart: always
  kafka:
    image: wurstmeister/kafka
    networks:
      - core-ms
    container_name: kafka
    links:
      - zookeeper:zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPIC: "transaction.notification"
      KAFKA_ADVERTISED_PORT: 9092
    depends_on:
      - zookeeper
  mongodb:
    image: mongo
    container_name: mongodb
    restart: always
    networks:
      - core-ms
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
  vault:
    image: vault:latest
    container_name: vault
    networks:
      - core-ms
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: "vOU1OCs0IDS6pjr6xGKgkq9AVWhCrs4fo5dVvuK3UDk"
      VAULT_ADDR: "http://0.0.0.0:8200"
    cap_add:
      - IPC_LOCK
    ports:
      - "8200:8200"
    volumes:
      - "vault-logs:/vault/logs"
      - "vault-file:/vault/file"
  redis:
    image: redis
    container_name: redis
    hostname: redis
    restart: always
    networks:
      - core-ms
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
networks:
  core-ms:
    driver: bridge
volumes:
  mdb_data:
  vault-logs:
  vault-file:
  mongodb_data:
    driver: local
  redis_data:
    driver: local